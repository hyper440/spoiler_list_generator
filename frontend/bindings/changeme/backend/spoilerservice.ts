// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Call as $Call, CancellablePromise as $CancellablePromise, Create as $Create } from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../github.com/wailsapp/wails/v3/pkg/application/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * AddMovie adds a single movie
 */
export function AddMovie(movie: $models.Movie): $CancellablePromise<void> {
    return $Call.ByID(2167188870, movie);
}

/**
 * ClearMovies removes all movies
 */
export function ClearMovies(): $CancellablePromise<void> {
    return $Call.ByID(3366575601);
}

/**
 * EmitProgress emits a progress event through the Wails event system
 */
export function EmitProgress(progress: $models.ProcessProgress): $CancellablePromise<void> {
    return $Call.ByID(2779484171, progress);
}

/**
 * Link filtering
 */
export function FilterLinks(text: string, allowFilters: string[], blockFilters: string[]): $CancellablePromise<[string[], string[]]> {
    return $Call.ByID(777849334, text, allowFilters, blockFilters).then(($result: any) => {
        $result[0] = $$createType0($result[0]);
        $result[1] = $$createType0($result[1]);
        return $result;
    });
}

/**
 * GenerateResult generates the formatted spoiler list
 */
export function GenerateResult(): $CancellablePromise<string> {
    return $Call.ByID(1858085317);
}

/**
 * GetExpandedFilePaths expands directories to individual files
 */
export function GetExpandedFilePaths(paths: string[]): $CancellablePromise<string[]> {
    return $Call.ByID(2612523930, paths).then(($result: any) => {
        return $$createType0($result);
    });
}

/**
 * GetMovies returns all movies
 */
export function GetMovies(): $CancellablePromise<$models.Movie[]> {
    return $Call.ByID(1376886268).then(($result: any) => {
        return $$createType2($result);
    });
}

/**
 * Settings management
 */
export function GetSettings(): $CancellablePromise<$models.AppSettings> {
    return $Call.ByID(3737918080).then(($result: any) => {
        return $$createType3($result);
    });
}

/**
 * Template management
 */
export function GetTemplate(): $CancellablePromise<string> {
    return $Call.ByID(841079811);
}

/**
 * ProcessFiles processes multiple file paths and emits progress events
 */
export function ProcessFiles(filePaths: string[]): $CancellablePromise<void> {
    return $Call.ByID(768775415, filePaths);
}

/**
 * ProcessFilesAsync starts processing files asynchronously and emits progress events
 */
export function ProcessFilesAsync(filePaths: string[]): $CancellablePromise<void> {
    return $Call.ByID(4139121497, filePaths);
}

/**
 * Link processing (unbender)
 */
export function ProcessLinks(text: string, replaceInOriginal: boolean): $CancellablePromise<$models.LinkProcessResult> {
    return $Call.ByID(3738831569, text, replaceInOriginal).then(($result: any) => {
        return $$createType4($result);
    });
}

/**
 * ProcessURLs processes clipboard URLs
 */
export function ProcessURLs(text: string, acceptOnlyLinks: boolean): $CancellablePromise<$models.Movie[]> {
    return $Call.ByID(3668167646, text, acceptOnlyLinks).then(($result: any) => {
        return $$createType2($result);
    });
}

/**
 * RemoveMovie removes a movie by ID
 */
export function RemoveMovie(id: number): $CancellablePromise<void> {
    return $Call.ByID(2824633037, id);
}

/**
 * SetApp sets the application instance for event emission
 */
export function SetApp(app: application$0.App | null): $CancellablePromise<void> {
    return $Call.ByID(671908240, app);
}

export function SetTemplate(template: string): $CancellablePromise<void> {
    return $Call.ByID(2381016119, template);
}

export function UpdateSettings(settings: $models.AppSettings): $CancellablePromise<void> {
    return $Call.ByID(724887735, settings);
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $models.Movie.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = $models.AppSettings.createFrom;
const $$createType4 = $models.LinkProcessResult.createFrom;

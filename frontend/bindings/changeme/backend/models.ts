// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * AppSettings represents application settings
 */
export class AppSettings {
    "centerAlign": boolean;
    "hideEmpty": boolean;
    "uiFontSize": number;
    "listFontSize": number;
    "textFontSize": number;
    "screenshotCount": number;
    "fastpicSid": string;
    "screenshotQuality": number;

    /** Creates a new AppSettings instance. */
    constructor($$source: Partial<AppSettings> = {}) {
        if (!("centerAlign" in $$source)) {
            this["centerAlign"] = false;
        }
        if (!("hideEmpty" in $$source)) {
            this["hideEmpty"] = false;
        }
        if (!("uiFontSize" in $$source)) {
            this["uiFontSize"] = 0;
        }
        if (!("listFontSize" in $$source)) {
            this["listFontSize"] = 0;
        }
        if (!("textFontSize" in $$source)) {
            this["textFontSize"] = 0;
        }
        if (!("screenshotCount" in $$source)) {
            this["screenshotCount"] = 0;
        }
        if (!("fastpicSid" in $$source)) {
            this["fastpicSid"] = "";
        }
        if (!("screenshotQuality" in $$source)) {
            this["screenshotQuality"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppSettings instance from a string or object.
     */
    static createFrom($$source: any = {}): AppSettings {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AppSettings($$parsedSource as Partial<AppSettings>);
    }
}

/**
 * Movie represents a media file with its metadata
 */
export class Movie {
    "id": number;
    "fileName": string;
    "filePath": string;
    "fileSize": string;
    "fileSizeBytes": number;
    "duration": string;
    "width": string;
    "height": string;
    "bitRate": string;
    "videoBitRate": string;
    "audioBitRate": string;
    "videoCodec": string;
    "audioCodec": string;
    "screenshotUrls": string[];
    "screenshotAlbum": string;
    "params": { [_: string]: string };

    /**
     * "pending", "processing", "completed", "error"
     */
    "processingState": string;

    /** Creates a new Movie instance. */
    constructor($$source: Partial<Movie> = {}) {
        if (!("id" in $$source)) {
            this["id"] = 0;
        }
        if (!("fileName" in $$source)) {
            this["fileName"] = "";
        }
        if (!("filePath" in $$source)) {
            this["filePath"] = "";
        }
        if (!("fileSize" in $$source)) {
            this["fileSize"] = "";
        }
        if (!("fileSizeBytes" in $$source)) {
            this["fileSizeBytes"] = 0;
        }
        if (!("duration" in $$source)) {
            this["duration"] = "";
        }
        if (!("width" in $$source)) {
            this["width"] = "";
        }
        if (!("height" in $$source)) {
            this["height"] = "";
        }
        if (!("bitRate" in $$source)) {
            this["bitRate"] = "";
        }
        if (!("videoBitRate" in $$source)) {
            this["videoBitRate"] = "";
        }
        if (!("audioBitRate" in $$source)) {
            this["audioBitRate"] = "";
        }
        if (!("videoCodec" in $$source)) {
            this["videoCodec"] = "";
        }
        if (!("audioCodec" in $$source)) {
            this["audioCodec"] = "";
        }
        if (!("screenshotUrls" in $$source)) {
            this["screenshotUrls"] = [];
        }
        if (!("screenshotAlbum" in $$source)) {
            this["screenshotAlbum"] = "";
        }
        if (!("params" in $$source)) {
            this["params"] = {};
        }
        if (!("processingState" in $$source)) {
            this["processingState"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Movie instance from a string or object.
     */
    static createFrom($$source: any = {}): Movie {
        const $$createField13_0 = $$createType0;
        const $$createField15_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("screenshotUrls" in $$parsedSource) {
            $$parsedSource["screenshotUrls"] = $$createField13_0($$parsedSource["screenshotUrls"]);
        }
        if ("params" in $$parsedSource) {
            $$parsedSource["params"] = $$createField15_0($$parsedSource["params"]);
        }
        return new Movie($$parsedSource as Partial<Movie>);
    }
}

/**
 * ProcessProgress represents file processing progress
 */
export class ProcessProgress {
    "current": number;
    "total": number;
    "fileName": string;
    "message": string;
    "completed": boolean;
    "error"?: string;

    /** Creates a new ProcessProgress instance. */
    constructor($$source: Partial<ProcessProgress> = {}) {
        if (!("current" in $$source)) {
            this["current"] = 0;
        }
        if (!("total" in $$source)) {
            this["total"] = 0;
        }
        if (!("fileName" in $$source)) {
            this["fileName"] = "";
        }
        if (!("message" in $$source)) {
            this["message"] = "";
        }
        if (!("completed" in $$source)) {
            this["completed"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ProcessProgress instance from a string or object.
     */
    static createFrom($$source: any = {}): ProcessProgress {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ProcessProgress($$parsedSource as Partial<ProcessProgress>);
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $Create.Map($Create.Any, $Create.Any);

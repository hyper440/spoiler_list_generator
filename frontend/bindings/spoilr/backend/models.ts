// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * AppSettings represents application settings
 */
export class AppSettings {
    "screenshotCount": number;
    "fastpicSid": string;
    "screenshotQuality": number;

    /**
     * Max parallel screenshot generation
     */
    "maxConcurrentScreenshots": number;

    /**
     * Max parallel uploads
     */
    "maxConcurrentUploads": number;

    /**
     * MTN command line arguments
     */
    "mtnArgs": string;

    /** Creates a new AppSettings instance. */
    constructor($$source: Partial<AppSettings> = {}) {
        if (!("screenshotCount" in $$source)) {
            this["screenshotCount"] = 0;
        }
        if (!("fastpicSid" in $$source)) {
            this["fastpicSid"] = "";
        }
        if (!("screenshotQuality" in $$source)) {
            this["screenshotQuality"] = 0;
        }
        if (!("maxConcurrentScreenshots" in $$source)) {
            this["maxConcurrentScreenshots"] = 0;
        }
        if (!("maxConcurrentUploads" in $$source)) {
            this["maxConcurrentUploads"] = 0;
        }
        if (!("mtnArgs" in $$source)) {
            this["mtnArgs"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppSettings instance from a string or object.
     */
    static createFrom($$source: any = {}): AppSettings {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AppSettings($$parsedSource as Partial<AppSettings>);
    }
}

/**
 * AppState represents the current application state
 */
export class AppState {
    "processing": boolean;
    "movies": Movie[];

    /** Creates a new AppState instance. */
    constructor($$source: Partial<AppState> = {}) {
        if (!("processing" in $$source)) {
            this["processing"] = false;
        }
        if (!("movies" in $$source)) {
            this["movies"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AppState instance from a string or object.
     */
    static createFrom($$source: any = {}): AppState {
        const $$createField1_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("movies" in $$parsedSource) {
            $$parsedSource["movies"] = $$createField1_0($$parsedSource["movies"]);
        }
        return new AppState($$parsedSource as Partial<AppState>);
    }
}

/**
 * Movie represents a media file with its metadata
 */
export class Movie {
    "id": string;
    "fileName": string;
    "filePath": string;
    "fileSize": string;
    "fileSizeBytes": number;
    "duration": string;
    "width": string;
    "height": string;
    "bitRate": string;
    "videoBitRate": string;
    "audioBitRate": string;
    "videoCodec": string;
    "audioCodec": string;

    /**
     * BBThumb URLs
     */
    "screenshotUrls": string[];

    /**
     * BBBig URLs
     */
    "screenshotBigUrls": string[];
    "screenshotAlbum": string;

    /**
     * BBThumb URL
     */
    "thumbnailUrl": string;

    /**
     * BBBig URL
     */
    "thumbnailBigUrl": string;
    "params": { [_: string]: string };

    /**
     * State constants defined below
     */
    "processingState": string;

    /**
     * Error details if processing fails
     */
    "processingError"?: string;

    /**
     * Individual errors that occurred during processing
     */
    "errors"?: string[];

    /** Creates a new Movie instance. */
    constructor($$source: Partial<Movie> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("fileName" in $$source)) {
            this["fileName"] = "";
        }
        if (!("filePath" in $$source)) {
            this["filePath"] = "";
        }
        if (!("fileSize" in $$source)) {
            this["fileSize"] = "";
        }
        if (!("fileSizeBytes" in $$source)) {
            this["fileSizeBytes"] = 0;
        }
        if (!("duration" in $$source)) {
            this["duration"] = "";
        }
        if (!("width" in $$source)) {
            this["width"] = "";
        }
        if (!("height" in $$source)) {
            this["height"] = "";
        }
        if (!("bitRate" in $$source)) {
            this["bitRate"] = "";
        }
        if (!("videoBitRate" in $$source)) {
            this["videoBitRate"] = "";
        }
        if (!("audioBitRate" in $$source)) {
            this["audioBitRate"] = "";
        }
        if (!("videoCodec" in $$source)) {
            this["videoCodec"] = "";
        }
        if (!("audioCodec" in $$source)) {
            this["audioCodec"] = "";
        }
        if (!("screenshotUrls" in $$source)) {
            this["screenshotUrls"] = [];
        }
        if (!("screenshotBigUrls" in $$source)) {
            this["screenshotBigUrls"] = [];
        }
        if (!("screenshotAlbum" in $$source)) {
            this["screenshotAlbum"] = "";
        }
        if (!("thumbnailUrl" in $$source)) {
            this["thumbnailUrl"] = "";
        }
        if (!("thumbnailBigUrl" in $$source)) {
            this["thumbnailBigUrl"] = "";
        }
        if (!("params" in $$source)) {
            this["params"] = {};
        }
        if (!("processingState" in $$source)) {
            this["processingState"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Movie instance from a string or object.
     */
    static createFrom($$source: any = {}): Movie {
        const $$createField13_0 = $$createType2;
        const $$createField14_0 = $$createType2;
        const $$createField18_0 = $$createType3;
        const $$createField21_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("screenshotUrls" in $$parsedSource) {
            $$parsedSource["screenshotUrls"] = $$createField13_0($$parsedSource["screenshotUrls"]);
        }
        if ("screenshotBigUrls" in $$parsedSource) {
            $$parsedSource["screenshotBigUrls"] = $$createField14_0($$parsedSource["screenshotBigUrls"]);
        }
        if ("params" in $$parsedSource) {
            $$parsedSource["params"] = $$createField18_0($$parsedSource["params"]);
        }
        if ("errors" in $$parsedSource) {
            $$parsedSource["errors"] = $$createField21_0($$parsedSource["errors"]);
        }
        return new Movie($$parsedSource as Partial<Movie>);
    }
}

// Private type creation functions
const $$createType0 = Movie.createFrom;
const $$createType1 = $Create.Array($$createType0);
const $$createType2 = $Create.Array($Create.Any);
const $$createType3 = $Create.Map($Create.Any, $Create.Any);

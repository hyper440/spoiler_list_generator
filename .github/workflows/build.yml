name: Build Release

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      os:
        description: "OS to build (macos, windows, linux, all)"
        required: true
        default: "all"
        type: choice
        options:
          - macos
          - windows
          - linux
          - all
      branch:
        description: "Branch to build from"
        required: true
        default: "main"
        type: string
      commit_sha:
        description: "Specific commit SHA to build (optional, overrides branch)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      tag_name: ${{ steps.set-tag.outputs.tag_name }}
      release_name: ${{ steps.set-tag.outputs.release_name }}
      release_body: ${{ steps.set-tag.outputs.release_body }}
    steps:
      - name: Set Tag and Release Info
        id: set-tag
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Tag push event
            TAG_NAME="${{ github.ref_name }}"
            RELEASE_NAME="Release ${{ github.ref_name }}"
            RELEASE_BODY="Release build for tag: ${{ github.ref_name }}"
            IS_PRERELEASE="false"
          else
            # Manual workflow_dispatch event
            TAG_NAME="manual-build-${{ inputs.commit_sha && inputs.commit_sha || inputs.branch }}"
            RELEASE_NAME="Manual Build from ${{ inputs.branch }}${{ inputs.commit_sha && format(' ({0})', inputs.commit_sha) || '' }} (Latest)"
            RELEASE_BODY="Latest manually triggered build artifacts from branch: ${{ inputs.branch }}${{ inputs.commit_sha && format('\nCommit: {0}', inputs.commit_sha) || '' }}"
            IS_PRERELEASE="true"
          fi

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "release_body=$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: Create or Find Draft Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set-tag.outputs.tag_name }}
          name: ${{ steps.set-tag.outputs.release_name }}
          body: ${{ steps.set-tag.outputs.release_body }}
          draft: ${{ github.event_name == 'workflow_dispatch' }}
          prerelease: ${{ steps.set-tag.outputs.is_prerelease }}

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: prepare-release
    if: >
      (github.event_name == 'workflow_dispatch' && (inputs.os == 'macos' || inputs.os == 'all')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'push' && github.sha || (inputs.commit_sha || inputs.branch) }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: Install Wails3
        run: go install -v github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Build macOS App
        run: |
          mkdir -p release
          wails3 doctor

          # Update build assets
          wails3 task common:update:build-assets

          # Build the app package
          wails3 task darwin:package:universal

          # Create zip file of the .app bundle
          cd bin
          zip -r ../release/spoiler_list_generator-macos-universal.zip spoiler_list_generator.app
          cd ..

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: release/spoiler_list_generator-macos-universal.zip

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/spoiler_list_generator-macos-universal.zip
          tag_name: ${{ needs.prepare-release.outputs.tag_name }}
          draft: ${{ github.event_name == 'workflow_dispatch' }}

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: prepare-release
    if: >
      (github.event_name == 'workflow_dispatch' && (inputs.os == 'windows' || inputs.os == 'all')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'push' && github.sha || (inputs.commit_sha || inputs.branch) }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: Install Task
        shell: pwsh
        run: |
          go install github.com/go-task/task/v3/cmd/task@latest
          Write-Host "Task installed successfully"

      - name: Install Wails3
        shell: cmd
        run: go install -v github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Build Windows App
        shell: pwsh
        run: |
          mkdir -p release
          wails3 doctor

          # Update build assets
          task common:update:build-assets

          # Build the application with production flags
          task windows:build PRODUCTION=true
          Move-Item -Path "bin\spoiler_list_generator.exe" -Destination "release\spoiler_list_generator-x64.exe"
          Remove-Item -Path "bin\spoiler_list_generator.exe" -ErrorAction SilentlyContinue

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: release/spoiler_list_generator-x64.exe

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/spoiler_list_generator-x64.exe
          tag_name: ${{ needs.prepare-release.outputs.tag_name }}
          draft: ${{ github.event_name == 'workflow_dispatch' }}

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: prepare-release
    if: >
      (github.event_name == 'workflow_dispatch' && (inputs.os == 'linux' || inputs.os == 'all')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'push' && github.sha || (inputs.commit_sha || inputs.branch) }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true

      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libwebkit2gtk-4.1-dev gcc libgtk-3-dev pkg-config

      - name: Install Wails3
        run: go install -v github.com/wailsapp/wails/v3/cmd/wails3@latest

      - name: Build Linux App
        run: |
          mkdir -p release
          wails3 doctor

          # Update build assets
          wails3 task common:update:build-assets

          # Build the application
          wails3 task package

          # Generate deb package
          wails3 tool package -name spoiler_list_generator -format deb -config ./build/linux/nfpm/nfpm.yaml -out ./release

          # Generate AppImage (optional - skip on failure)
          echo "Attempting to generate AppImage..."
          if wails3 package; then
            echo "AppImage generation successful"
            if [ -f "bin/spoiler_list_generator-x86_64.AppImage" ]; then
              mv bin/spoiler_list_generator-x86_64.AppImage "release/spoiler_list_generator_amd64.AppImage"
              rm -f bin/spoiler_list_generator-x86_64.AppImage
              echo "AppImage moved to release directory"
            else
              echo "AppImage file not found after generation"
            fi
          else
            echo "AppImage generation failed - skipping AppImage creation"
          fi

          # Rename .deb file if needed
          if [ -f "release/spoiler_list_generator.deb" ]; then
            mv "release/spoiler_list_generator.deb" "release/spoiler_list_generator_amd64.deb"
          fi

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: |
            release/spoiler_list_generator_amd64.deb
            release/spoiler_list_generator_amd64.AppImage

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/spoiler_list_generator_amd64.deb
            release/spoiler_list_generator_amd64.AppImage
          tag_name: ${{ needs.prepare-release.outputs.tag_name }}
          draft: ${{ github.event_name == 'workflow_dispatch' }}

  # Finalize release when building all platforms (both tag push and manual "all")
  finalize-release:
    name: Finalize Release
    needs: [prepare-release, build-macos, build-windows, build-linux]
    if: >
      always() && 
      !cancelled() &&
      (
        (github.event_name == 'workflow_dispatch' && inputs.os == 'all' && success()) ||
        (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && success())
      )
    runs-on: ubuntu-latest
    steps:
      - name: Update Release Status
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag_name }}
          name: ${{ needs.prepare-release.outputs.release_name }}
          body: ${{ needs.prepare-release.outputs.release_body }}
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' }}
